pipeline {
    agent any

    triggers {
        // Poll SCM every minute for changes
        pollSCM('* * * * *')  // Cron syntax: every minute
    }

    environment {
        DOCKER_IMAGE = 'shekpe/django-project:latest'
        GIT_REPO_URL = 'https://github.com/Xclusivep/myproject.git'
        DOCKER_CREDENTIALS = 'dockerhub-credentials'  // Docker Hub credentials ID in Jenkins
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${GIT_REPO_URL}"
            }
        }

        stage('Set Up Python Environment') {
            steps {
                script {
                    // Install python3-venv if not already installed
                    sh 'sudo apt-get update && sudo apt-get install -y python3-venv'

                    // Create and activate virtual environment
                    // Use bash explicitly to ensure 'source' works
                    sh '''
                    python3 -m venv venv
                    bash -c "source venv/bin/activate && pip install -r requirements.txt"
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Ensure variable substitution works within sh commands
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub using Jenkins credentials
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        '''
                    }
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Push Docker image to Docker Hub
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    // Clean up unused Docker images and containers to free up space
                    sh 'docker system prune -f'
                }
            }
        }
    }

    post {
        always {
            // Deactivate the virtual environment, only if it exists
            sh 'if [ -f venv/bin/activate ]; then deactivate || true; fi'
        }
    }
}

